query UIConfiguration{
    configuration{
        ui
    }
}

query FindCredentials{
    configuration {
        general {
            username, password
        }
    }
}

query FindSavedSceneFilters{
    findSavedFilters(mode: SCENES){
        ...SavedFilterParts
    }
}

query FindSavedFilter($id: ID!){
    findSavedFilter(id: $id){
        ...SavedFilterParts
    }
}

query FindAllNonEmptyTags{
    findTags(tag_filter: {scene_count: {modifier: GREATER_THAN, value: 1}}){
        tags {
            ...TagParts
            scene_count
        }}
}

query FindTags(
    $tag_filter: TagFilterType, $sort: String, $direction: SortDirectionEnum){
    findTags(tag_filter: $tag_filter, filter: {sort: $sort, direction: $direction, per_page: -1}){
        tags {
            ...TagParts
            scene_count
        }}
}

query FindTagByName($name: String!){
    findTags(tag_filter: {name: {value: $name, modifier: EQUALS}}){tags {
        id
    }}
}

query FindStudioByName($name: String!){
    findStudios(studio_filter: {name: {value: $name, modifier: EQUALS}}){studios {
        id
    }}
}

query FindPerformerByName($name: String!){
    findPerformers(performer_filter: {name: {value: $name, modifier: EQUALS}}){performers {
        id
    }}
}

# @genqlient(for: "SceneFilterType.has_markers", omitempty: true)
query FindScenesByFilter(
    $scene_filter: SceneFilterType, $filterOpts: FindFilterType){
    findScenes(scene_filter: $scene_filter, filter: $filterOpts){
        scenes {
            ...ScenePreviewParts
        }}
}

query FindAllScenes{findScenes(filter: {per_page: -1}){
    scenes {
        ...ScenePreviewParts
    }}
}

query FindScenesByTags($tags: [ID!]){
    findScenes(scene_filter: {tags: {modifier: INCLUDES, value: $tags}}, filter: {per_page: -1}){
        scenes {
            ...ScenePreviewParts, tags {
                ...TagParts
            }
        }}
}

query FindScene($id: ID){
    findScene(id:$id){
        ...FullSceneParts
    }
}

fragment SavedFilterParts on SavedFilter{
    id, name, filter, mode
}

fragment TagParts on Tag{
    id,name
}

fragment ScenePreviewParts on Scene{
    id, title, file{duration}, paths {screenshot}
}

fragment FullSceneParts on Scene{
    id, title, rating, details, created_at,
    file{video_codec,size,duration,width, height},
    paths{screenshot, preview, stream},
    ...ScriptParts
    ...StreamsParts
    tags {
        ...TagParts
    },
    studio{
        id, name, rating
    },
    scene_markers {
        id, seconds, title
    },
    performers {
        id, name, rating
    }
}

fragment StreamsParts on Scene{
    file{height}
    sceneStreams{url, mime_type, label}
}

fragment ScriptParts on Scene{
    interactive
    paths {
        funscript
    }
}